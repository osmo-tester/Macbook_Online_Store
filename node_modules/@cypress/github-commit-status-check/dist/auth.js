"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const app_1 = __importDefault(require("@octokit/app"));
const rest_1 = __importDefault(require("@octokit/rest"));
const check_more_types_1 = __importDefault(require("check-more-types"));
const lazy_ass_1 = __importDefault(require("lazy-ass"));
/**

 *
 * Note: returned decoded string should start with line
 * '-----BEGIN RSA PRIVATE KEY-----'
 */
const getAppPrivateKeyFromEnvVariable = (appKey) => {
    return Buffer.from(appKey, 'base64').toString('ascii');
};
/**
 * Creates GitHub client using personal API token or unauthenticated
 *
 * @param {string} [auth] Optional personal API token or function returning token
 * @see https://github.com/octokit/rest.js#authentication
 */
function _createGitHubClient(auth) {
    return new rest_1.default({
        auth,
        userAgent: 'octokit/rest.js v16.23.2',
    });
}
/**
 * Functions for creating authenticated GitHub client
 */
var Auth;
(function (Auth) {
    function createApp(appId, appKey) {
        const privateKey = getAppPrivateKeyFromEnvVariable(appKey);
        return new app_1.default({ id: appId, privateKey });
    }
    Auth.createApp = createApp;
    function getFromEnvironment() {
        lazy_ass_1.default(check_more_types_1.default.unemptyString(process.env.GH_APP_ID), 'missing GH_APP_ID');
        const appId = process.env.GH_APP_ID;
        const installId = process.env.GH_INSTALLATION_ID;
        lazy_ass_1.default(check_more_types_1.default.unemptyString(installId), 'missing GH_INSTALLATION_ID');
        const installationId = parseInt(installId);
        lazy_ass_1.default(check_more_types_1.default.unemptyString(process.env.GH_PRIVATE_KEY), 'missing env variable GH_PRIVATE_KEY');
        const appKey = process.env.GH_PRIVATE_KEY;
        return {
            appId,
            installationId,
            appKey,
        };
    }
    Auth.getFromEnvironment = getFromEnvironment;
    const tokenHeader = (token) => `token ${token}`;
    /**
     * Creates GitHub rest client for a GitHub app installation
     */
    function createGithubAppClient(params) {
        const app = createApp(params.appId, params.appKey);
        const auth = () => 
        // @ts-ignore
        app
            .getInstallationAccessToken({ installationId: params.installationId })
            .then(tokenHeader);
        return _createGitHubClient(auth);
    }
    Auth.createGithubAppClient = createGithubAppClient;
})(Auth = exports.Auth || (exports.Auth = {}));
