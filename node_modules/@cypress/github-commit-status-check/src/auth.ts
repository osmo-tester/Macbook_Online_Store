import App from '@octokit/app'
import octokit from '@octokit/rest'
import is from 'check-more-types'
import la from 'lazy-ass'

/**

 *
 * Note: returned decoded string should start with line
 * '-----BEGIN RSA PRIVATE KEY-----'
 */
const getAppPrivateKeyFromEnvVariable = (appKey: string) => {
  return Buffer.from(appKey, 'base64').toString('ascii')
}

/**
 * Creates GitHub client using personal API token or unauthenticated
 *
 * @param {string} [auth] Optional personal API token or function returning token
 * @see https://github.com/octokit/rest.js#authentication
 */
function _createGitHubClient(auth?: string | (() => Promise<string>)) {
  return new octokit({
    auth,
    userAgent: 'octokit/rest.js v16.23.2',
  })
}

/**
 * Functions for creating authenticated GitHub client
 */
export namespace Auth {
  export function createApp(appId: string, appKey: string) {
    const privateKey = getAppPrivateKeyFromEnvVariable(appKey)
    return new App({ id: appId, privateKey })
  }

  type InstallationParameters = {
    appId: string
    installationId: number
    appKey: string
  }

  export function getFromEnvironment(): InstallationParameters {
    la(is.unemptyString(process.env.GH_APP_ID), 'missing GH_APP_ID')
    const appId = process.env.GH_APP_ID!

    const installId = process.env.GH_INSTALLATION_ID
    la(is.unemptyString(installId), 'missing GH_INSTALLATION_ID')
    const installationId = parseInt(installId!)
    la(
      is.unemptyString(process.env.GH_PRIVATE_KEY),
      'missing env variable GH_PRIVATE_KEY'
    )
    const appKey = process.env.GH_PRIVATE_KEY!

    return {
      appId,
      installationId,
      appKey,
    }
  }

  const tokenHeader = (token: string) => `token ${token}`

  /**
   * Creates GitHub rest client for a GitHub app installation
   */
  export function createGithubAppClient(params: InstallationParameters) {
    const app = createApp(params.appId, params.appKey)
    const auth = () =>
      // @ts-ignore
      app
        .getInstallationAccessToken({ installationId: params.installationId })
        .then(tokenHeader)

    return _createGitHubClient(auth)
  }
}
