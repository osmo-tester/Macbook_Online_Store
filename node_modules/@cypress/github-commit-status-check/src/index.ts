import { stripIndent } from 'common-tags'
import octokit from '@octokit/rest'
import debugApi from 'debug'
import { Auth } from './auth'

const debug = debugApi('@cypress/github-commit-status-check')

/**
 * Url string, should start with "https://..."
 */
export type url = string

/**
 * Github comments allow markdown
 */
export type markdown = string

export const getAppVeyorBuildUrl = () => {
  if (!process.env.APPVEYOR) {
    return
  }
  const {
    APPVEYOR_URL,
    APPVEYOR_ACCOUNT_NAME,
    APPVEYOR_PROJECT_SLUG,
    APPVEYOR_BUILD_ID,
  } = process.env
  if (
    !APPVEYOR_URL ||
    !APPVEYOR_ACCOUNT_NAME ||
    !APPVEYOR_BUILD_ID ||
    !APPVEYOR_PROJECT_SLUG
  ) {
    console.error('Hmm, cannot find build environment variables on AppVeyor CI')
    return
  }
  return `${APPVEYOR_URL}/project/${APPVEYOR_ACCOUNT_NAME}/${APPVEYOR_PROJECT_SLUG}/builds/${APPVEYOR_BUILD_ID}`
}

/**
 * Returns the current build job url based on built-in environment variables on various CIs
 * @see CircleCI https://circleci.com/docs/2.0/env-vars/
 * @see AppVeyor https://www.appveyor.com/docs/environment-variables/
 */
export const getTargetUrl = () =>
  process.env.CIRCLE_BUILD_URL || getAppVeyorBuildUrl()

export namespace GitHub {
  /**
   * Full commit SHA (40 hex characters, lowercase)
   */
  export type SHA = string
  /**
   * Commit status state
   */
  export enum StatusState {
    error = 'error',
    failure = 'failure',
    pending = 'pending',
    success = 'success',
  }

  export type CommitStatusOptions = {
    owner: string
    repo: string
    sha: string
    state: StatusState
    context: string
    targetUrl?: url
    description?: string
  }

  export async function setCommitStatus(
    options: CommitStatusOptions,
    gh: octokit
  ) {
    debug('setting commit status %o', options)

    let targetUrl = options.targetUrl || getTargetUrl()
    const ghOptions = {
      owner: options.owner,
      repo: options.repo,
      sha: options.sha,
      state: options.state || StatusState.pending,
      target_url: targetUrl,
      description: options.description,
      context: options.context,
    }
    debug('resolved commit status options %o', ghOptions)

    // https://octokit.github.io/rest.js/#api-Repos-createStatus
    await gh.repos.createStatus(ghOptions)

    debug(
      'created commit status: %s/%s sha %s state %s',
      ghOptions.owner,
      ghOptions.repo,
      ghOptions.sha,
      ghOptions.state
    )
    if (ghOptions.target_url) {
      debug('with details at %s', ghOptions.target_url)
    }
  }

  export type CommitCommentOptions = {
    owner: string
    repo: string
    sha: string
    comment: markdown
  }

  export async function addCommitComment(
    options: CommitCommentOptions,
    gh: octokit
  ) {
    debug('adding comment to the commit %o', options)

    const ghOptions = {
      owner: options.owner,
      repo: options.repo,
      sha: options.sha,
      body: options.comment,
    }
    debug('GitHub options %o', ghOptions)
    await gh.repos.createCommitComment(ghOptions)
  }
}

/**
 * Top level API method for getting GitHub settings from the environment,
 * creating the client and creating the status.
 *
  ```
  import {setCommitStatus} from '@cypress/github-commit-status-check'

  await setCommitStatus({
    owner: 'organization',
    repo: 'name',
    sha: '40 character commit sha',
    // state can be "error", "pending", "failure" or "success"
    state: 'pending',
    // optional properties
    targetUrl: 'http://...',
    description: 'my status message',
    context: 'short context'
  })
  ```
 */
export async function setCommitStatus(options: GitHub.CommitStatusOptions) {
  const params = Auth.getFromEnvironment()
  const gh = Auth.createGithubAppClient(params)
  await GitHub.setCommitStatus(options, gh)
}

/**
 * Adds arbitrary comment to a specific commit
 */
export async function addCommitComment(options: GitHub.CommitCommentOptions) {
  const params = Auth.getFromEnvironment()
  const gh = Auth.createGithubAppClient(params)
  await GitHub.addCommitComment(options, gh)
}
