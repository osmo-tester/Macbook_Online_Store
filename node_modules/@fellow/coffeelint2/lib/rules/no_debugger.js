(function() {
  var NoDebugger;

  module.exports = NoDebugger = (function() {
    class NoDebugger {
      lintToken(token, tokenApi) {
        var method, ref, ref1, ref2;
        if (((ref = token[0]) === 'DEBUGGER' || ref === 'STATEMENT') && token[1] === 'debugger') {
          return {
            token,
            context: `found '${token[0]}'`
          };
        }
        if ((ref1 = tokenApi.config[this.rule.name]) != null ? ref1.console : void 0) {
          if (token[1] === 'console' && ((ref2 = tokenApi.peek(1)) != null ? ref2[0] : void 0) === '.') {
            method = tokenApi.peek(2);
            return {
              token,
              context: `found 'console.${method[1]}'`
            };
          }
        }
      }

    };

    NoDebugger.prototype.rule = {
      name: 'no_debugger',
      level: 'warn',
      message: 'Found debugging code',
      console: false,
      description: 'This rule detects `debugger` and optionally `console` calls\nThis rule is `warn` by default.'
    };

    // TODO: after <1.10.0 is not supported, remove 'DEBUGGER' here
    NoDebugger.prototype.tokens = ['STATEMENT', 'DEBUGGER', 'IDENTIFIER'];

    return NoDebugger;

  }).call(this);

}).call(this);
