(function() {
  var NoPrivateFunctionFatArrows,
    indexOf = [].indexOf;

  module.exports = NoPrivateFunctionFatArrows = (function() {
    class NoPrivateFunctionFatArrows {
      constructor() {
        this.isCode = this.isCode.bind(this);
        this.isClass = this.isClass.bind(this);
        this.isValue = this.isValue.bind(this);
        this.isObject = this.isObject.bind(this);
        this.isFatArrowCode = this.isFatArrowCode.bind(this);
      }

      lintAST(node, astApi) {
        this.astApi = astApi;
        this.lintNode(node);
        return void 0;
      }

      lintNode(node, functions = []) {
        var error;
        if (this.isFatArrowCode(node) && indexOf.call(functions, node) >= 0) {
          error = this.astApi.createError({
            lineNumber: node.locationData.first_line + 1,
            columnNumber: node.locationData.first_column + 1
          });
          this.errors.push(error);
        }
        return node.eachChild((child) => {
          return this.lintNode(child, (function() {
            switch (false) {
              case !this.isClass(node):
                return this.functionsOfClass(node);
              // Once we've hit a function, we know we can't be in the top
              // level of a function anymore, so we can safely reset the
              // functions to empty to save work.
              case !this.isCode(node):
                return [];
              default:
                return functions;
            }
          }).call(this));
        });
      }

      isCode(node) {
        return this.astApi.getNodeName(node) === 'Code';
      }

      isClass(node) {
        return this.astApi.getNodeName(node) === 'Class';
      }

      isValue(node) {
        return this.astApi.getNodeName(node) === 'Value';
      }

      isObject(node) {
        return this.astApi.getNodeName(node) === 'Obj';
      }

      isFatArrowCode(node) {
        return this.isCode(node) && node.bound;
      }

      functionsOfClass(classNode) {
        var bodyNode, bodyValues;
        bodyValues = (function() {
          var i, len, ref, results;
          ref = classNode.body.expressions;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            bodyNode = ref[i];
            if (this.isValue(bodyNode) && this.isObject(bodyNode.base)) {
              continue;
            }
            results.push(bodyNode.value);
          }
          return results;
        }).call(this);
        return bodyValues.filter(this.isCode);
      }

    };

    NoPrivateFunctionFatArrows.prototype.rule = {
      name: 'no_private_function_fat_arrows',
      level: 'warn',
      message: 'Used the fat arrow for a private function',
      description: 'Warns when you use the fat arrow for a private function\ninside a class definition scope. It is not necessary and\nit does not do anything.'
    };

    return NoPrivateFunctionFatArrows;

  }).call(this);

}).call(this);
