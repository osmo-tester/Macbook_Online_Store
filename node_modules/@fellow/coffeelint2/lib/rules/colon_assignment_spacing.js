(function() {
  var ColonAssignmentSpacing;

  module.exports = ColonAssignmentSpacing = (function() {
    class ColonAssignmentSpacing {
      lintToken(token, tokenApi) {
        var checkSpacing, getSpaceFromToken, isLeftSpaced, isRightSpaced, leftSpacing, nextToken, previousToken, rightSpacing, spaceRules;
        spaceRules = tokenApi.config[this.rule.name].spacing;
        previousToken = tokenApi.peek(-1);
        nextToken = tokenApi.peek(1);
        getSpaceFromToken = function(direction) {
          var offset;
          switch (direction) {
            case 'left':
              return token[2].first_column - previousToken[2].last_column - 1;
            case 'right':
              // csx tags 'column' resolves to the beginning of the tag definition, rather
              // than the '<'
              offset = nextToken[0] !== 'CSX_TAG' ? -1 : -2;
              return nextToken[2].first_column - token[2].first_column + offset;
          }
        };
        checkSpacing = function(direction) {
          var isSpaced, spacing;
          spacing = getSpaceFromToken(direction);
          // when spacing is negative, the neighboring token is a newline
          isSpaced = spacing < 0 ? true : spacing === parseInt(spaceRules[direction]);
          return [isSpaced, spacing];
        };
        [isLeftSpaced, leftSpacing] = checkSpacing('left');
        [isRightSpaced, rightSpacing] = checkSpacing('right');
        if (token.csxColon || isLeftSpaced && isRightSpaced) {
          return null;
        } else {
          return {
            token: token,
            context: `Incorrect spacing around column ${token[2].first_column}`
          };
        }
      }

    };

    ColonAssignmentSpacing.prototype.rule = {
      name: 'colon_assignment_spacing',
      level: 'ignore',
      message: 'Colon assignment without proper spacing',
      spacing: {
        left: 0,
        right: 0
      },
      description: '<p>This rule checks to see that there is spacing before and\nafter the colon in a colon assignment (i.e., classes, objects).\nThe spacing amount is specified by\nspacing.left and spacing.right, respectively.\nA zero value means no spacing required.\n</p>\n<pre><code>\n#\n# If spacing.left and spacing.right is 1\n#\n\n# Doesn\'t throw an error\nobject = {spacing : true}\nclass Dog\n  canBark : true\n\n# Throws an error\nobject = {spacing: true}\nclass Cat\n  canBark: false\n</code></pre>'
    };

    ColonAssignmentSpacing.prototype.tokens = [':'];

    return ColonAssignmentSpacing;

  }).call(this);

}).call(this);
