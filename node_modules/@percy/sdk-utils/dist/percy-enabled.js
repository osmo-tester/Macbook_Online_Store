"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.isPercyEnabled = isPercyEnabled;

var _logger = _interopRequireDefault(require("@percy/logger"));

var _percyInfo = _interopRequireDefault(require("./percy-info"));

var _request = _interopRequireDefault(require("./request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Create a socket to connect to a remote logger
async function connectRemoteLogger() {
  await _logger.default.remote(async () => {
    let url = _percyInfo.default.address.replace('http', 'ws');

    if (process.env.__PERCY_BROWSERIFIED__) {
      return new window.WebSocket(url);
    } else {
      /* eslint-disable-next-line import/no-extraneous-dependencies */
      let {
        default: WebSocket
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('ws')));
      let ws = new WebSocket(url); // allow node to exit with an active connection

      return ws.once('open', () => ws._socket.unref());
    }
  });
} // Check if Percy is enabled using the healthcheck endpoint


async function isPercyEnabled() {
  if (_percyInfo.default.enabled == null) {
    let log = (0, _logger.default)('utils');
    let error;

    try {
      let response = await (0, _request.default)('/percy/healthcheck');
      _percyInfo.default.version = response.headers['x-percy-core-version'];
      _percyInfo.default.config = response.body.config;
      _percyInfo.default.enabled = true;
    } catch (e) {
      _percyInfo.default.enabled = false;
      error = e;
    }

    if (_percyInfo.default.enabled && _percyInfo.default.version.major !== 1) {
      log.info('Unsupported Percy CLI version, disabling snapshots');
      log.debug(`Found version: ${_percyInfo.default.version}`);
      _percyInfo.default.enabled = false;
    } else if (!_percyInfo.default.enabled) {
      log.info('Percy is not running, disabling snapshots');
      log.debug(error);
    }

    if (_percyInfo.default.enabled) {
      await connectRemoteLogger();
    }
  }

  return _percyInfo.default.enabled;
}

var _default = isPercyEnabled;
exports.default = _default;